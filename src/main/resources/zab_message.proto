package zab;

option java_package = "org.apache.zab.proto";
option java_outer_classname = "ZabMessage";

message Message {
  enum MessageType {
    HEARTBEAT = 0;
    // Corresponds to CEPOCH message in Zab paper.
    PROPOSED_EPOCH = 1;
    NEW_EPOCH = 2;
    ACK_EPOCH = 3;
    NEW_LEADER = 4;
    ACK_LEADER = 5;
    COMMIT_LEADER = 6;
    PROPOSE = 7;
    ACK = 8;
    COMMIT = 9;
    PULL_TXN_REQ = 10;
    PROPOSAL = 11;
    DIFF = 12;
    TRUNCATE = 13;
    SNAPSHOT = 14;
    REQUEST = 15;
    HANDSHAKE = 16;
    FLUSH_PREPROCESSOR = 18;
    FLUSH_SYNCPROCESSOR = 19;
    ADD_FOLLOWER = 20;
    DISCONNECTED = 21;
    REMOVE_FOLLOWER = 22;
    QUERY_LEADER = 23;
    QUERY_LEADER_REPLY = 24;
    JOIN = 25;
    COP = 26;
    // The last message of synchronization. It contains cluster configuration.
    SYNC_END = 27;
    LEAVE = 28;
    ACK_COP = 29;
    INVALID_MESSAGE = 30;
  }

  required MessageType type = 1;

  // One of the following will be filled in depending on the message type. If
  // the message type is heartbeat message, then none of the following will be
  // filled in.
  optional ProposedEpoch proposed_epoch = 2;
  optional NewEpoch new_epoch = 3;
  optional AckEpoch ack_epoch = 4;
  optional PullTxnReq pull_txn_req = 5;
  optional Proposal proposal = 6;
  optional Diff diff = 7;
  optional Truncate truncate = 8;
  optional NewLeader new_leader = 9;
  optional Ack ack = 10;
  optional Snapshot snapshot = 11;
  optional Request request = 12;
  optional Commit commit = 13;
  optional Handshake handshake = 14;
  optional FlushPreProcessor flush_pre_processor = 16;
  optional FlushSyncProcessor flush_sync_processor = 17;
  optional AddFollower add_follower = 18;
  optional Disconnected disconnected = 19;
  optional RemoveFollower removeFollower = 20;
  optional QueryReply reply = 21;
  optional ClusterConfiguration config = 22;
  optional Leave leave = 23;
  optional AckCop ack_cop = 24;
  optional InvalidMessage invalid = 30;
}

message InvalidMessage {
  required bytes received_bytes = 1;
}

// This message corresponds to CEPOCH message in Zab paper.
message ProposedEpoch {
  required int32 proposed_epoch = 1;
  required int32 current_epoch = 2;
  required ClusterConfiguration config = 3;
}

message NewEpoch {
  required int32 new_epoch = 1;
}

message AckEpoch {
  required int32 acknowledged_epoch = 1;
  required Zxid lastZxid = 2;
}

// Leader sends this message to ask follower to sync its history to leader
// from last_zxid.
message PullTxnReq {
  // Sync follower's history to leader from last_xid.
  required Zxid last_zxid = 1;
}

// Proposal contains transaction id and transaction data.
message Proposal {
  // Transaction id.
  required Zxid zxid = 1;
  // Transaction body.
  required bytes body = 2;
  // The id of the client who sends the request.
  optional string clientId = 3;
}

message Diff {
  required Zxid last_zxid = 1;
}

message Truncate {
  required Zxid last_prefix_zxid = 1;
}

message Snapshot {
  required Zxid last_zxid = 1;
}

message Zxid {
  required int32 epoch = 1;
  required int32 xid = 2;
}

message NewLeader {
  required int32 epoch = 1;
}

message Ack {
  required Zxid zxid = 1;
}

message Commit {
  required Zxid zxid = 1;
}

message Request {
  required bytes request = 1;
}

// This message is used by NettyTransport. When a TCP connection is established,
// the TCP client send a Handshake message with its own node ID (hostname:port) to
// the TCP server, where the port is the port the TCP client is listening to for
// accepting incoming connections. When the TCP server receives the Handshake
// message, it sends back a Handshake message with its node ID.
message Handshake {
  required string node_id = 1;
}

// Used to flush PreProcessor.
message FlushPreProcessor {
  required string followerId = 1;
}

// Used to flush SyncProposalProcessor.
message FlushSyncProcessor {
  required string followerId = 1;
  optional Zxid lastAppendedZxid = 2;
}


// Used to ask PreProcessor and AckProcessor adding new joined followers to
// quorumSet.
message AddFollower {
  required string followerId = 1;
}

// Once onDisconnected callback is called, passe this message to main thread to
// let it handles the disconnection. This message will not go through network.
message Disconnected {
  required string serverId = 1;
}

// Used to ask PreProcessor and AckProcessor remove disconnected followers from
// quorumSet.
message RemoveFollower {
  required string followerId = 1;
}

message ClusterConfiguration {
  repeated string servers = 1;
  required Zxid version = 2;
}

message QueryReply {
  required string leader = 1;
}

message Leave {
  required string serverId = 1;
}

message AckCop {
  required Zxid version = 1;
}
